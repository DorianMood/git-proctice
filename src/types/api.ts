/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Sample Application Flow OAuth2 Project
 * This is an example of using OAuth2 Application Flow in a specification to describe security to your API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://virtserver.swaggerhub.com/KeyMixer/KeyMixer/1.0.0".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Company
 */
export interface Company {
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    projectId?: number;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    url?: string;
    /**
     * 
     * @type {CompanyDisplayUrl}
     * @memberof Company
     */
    displayUrl?: CompanyDisplayUrl;
    /**
     * 
     * @type {Array<CompanyRegions>}
     * @memberof Company
     */
    regions?: Array<CompanyRegions>;
    /**
     * 
     * @type {Array<CompanyBusinessCards>}
     * @memberof Company
     */
    businessCards?: Array<CompanyBusinessCards>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Company
     */
    keys?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Company
     */
    minusKeys?: Array<string>;
}

/**
 * 
 * @export
 * @interface CompanyBusinessCards
 */
export interface CompanyBusinessCards {
    /**
     * 
     * @type {number}
     * @memberof CompanyBusinessCards
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CompanyBusinessCards
     */
    tel?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyBusinessCards
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyBusinessCards
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyBusinessCards
     */
    street?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyBusinessCards
     */
    house?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyBusinessCards
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyBusinessCards
     */
    workingHours?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyBusinessCards
     */
    about?: string;
}

/**
 * 
 * @export
 * @interface CompanyDisplayUrl
 */
export interface CompanyDisplayUrl {
    /**
     * 
     * @type {string}
     * @memberof CompanyDisplayUrl
     */
    yandex?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CompanyDisplayUrl
     */
    google?: Array<string>;
}

/**
 * 
 * @export
 * @interface CompanyRegions
 */
export interface CompanyRegions {
    /**
     * 
     * @type {number}
     * @memberof CompanyRegions
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CompanyRegions
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    description?: string;
}

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    login?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password?: string;
}


/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Determine user by authh credentials.
         * @summary Get all companies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyGet(options: any = {}): FetchArgs {
            const localVarPath = `/company`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get company by its id.
         * @summary Get company by id.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyIdGet(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling companyIdGet.');
            }
            const localVarPath = `/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify company with id.
         * @summary Modify existing company.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyIdPost(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling companyIdPost.');
            }
            const localVarPath = `/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Description.
         * @summary Create new company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyPut(options: any = {}): FetchArgs {
            const localVarPath = `/company`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This should be protected.
         * @summary Get projects by user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectGet(options: any = {}): FetchArgs {
            const localVarPath = `/project`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This should be protected.
         * @summary Get project by project ID.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectIdGet(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling projectIdGet.');
            }
            const localVarPath = `/project/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify existing project on server.
         * @summary Modify existing project.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectIdPost(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling projectIdPost.');
            }
            const localVarPath = `/project/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Identify user by auth credentials and create new project.
         * @summary Create new project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectPut(options: any = {}): FetchArgs {
            const localVarPath = `/project`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This should be protected.
         * @summary Get user by ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet(options: any = {}): FetchArgs {
            const localVarPath = `/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify existing user by user id.
         * @summary Modify existing user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPost(options: any = {}): FetchArgs {
            const localVarPath = `/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Put new user to server. Return created user ID.
         * @summary Put new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPut(options: any = {}): FetchArgs {
            const localVarPath = `/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Determine user by authh credentials.
         * @summary Get all companies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).companyGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get company by its id.
         * @summary Get company by id.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyIdGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).companyIdGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Modify company with id.
         * @summary Modify existing company.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyIdPost(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).companyIdPost(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Description.
         * @summary Create new company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyPut(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).companyPut(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This should be protected.
         * @summary Get projects by user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This should be protected.
         * @summary Get project by project ID.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectIdGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectIdGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Modify existing project on server.
         * @summary Modify existing project.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectIdPost(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectIdPost(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Identify user by auth credentials and create new project.
         * @summary Create new project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectPut(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectPut(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This should be protected.
         * @summary Get user by ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Modify existing user by user id.
         * @summary Modify existing user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Put new user to server. Return created user ID.
         * @summary Put new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPut(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userPut(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Determine user by authh credentials.
         * @summary Get all companies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyGet(options?: any) {
            return DefaultApiFp(configuration).companyGet(options)(fetch, basePath);
        },
        /**
         * Get company by its id.
         * @summary Get company by id.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyIdGet(id: number, options?: any) {
            return DefaultApiFp(configuration).companyIdGet(id, options)(fetch, basePath);
        },
        /**
         * Modify company with id.
         * @summary Modify existing company.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyIdPost(id: number, options?: any) {
            return DefaultApiFp(configuration).companyIdPost(id, options)(fetch, basePath);
        },
        /**
         * Description.
         * @summary Create new company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyPut(options?: any) {
            return DefaultApiFp(configuration).companyPut(options)(fetch, basePath);
        },
        /**
         * This should be protected.
         * @summary Get projects by user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectGet(options?: any) {
            return DefaultApiFp(configuration).projectGet(options)(fetch, basePath);
        },
        /**
         * This should be protected.
         * @summary Get project by project ID.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectIdGet(id: number, options?: any) {
            return DefaultApiFp(configuration).projectIdGet(id, options)(fetch, basePath);
        },
        /**
         * Modify existing project on server.
         * @summary Modify existing project.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectIdPost(id: number, options?: any) {
            return DefaultApiFp(configuration).projectIdPost(id, options)(fetch, basePath);
        },
        /**
         * Identify user by auth credentials and create new project.
         * @summary Create new project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectPut(options?: any) {
            return DefaultApiFp(configuration).projectPut(options)(fetch, basePath);
        },
        /**
         * This should be protected.
         * @summary Get user by ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet(options?: any) {
            return DefaultApiFp(configuration).userGet(options)(fetch, basePath);
        },
        /**
         * Modify existing user by user id.
         * @summary Modify existing user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPost(options?: any) {
            return DefaultApiFp(configuration).userPost(options)(fetch, basePath);
        },
        /**
         * Put new user to server. Return created user ID.
         * @summary Put new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPut(options?: any) {
            return DefaultApiFp(configuration).userPut(options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Determine user by authh credentials.
     * @summary Get all companies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public companyGet(options?: any) {
        return DefaultApiFp(this.configuration).companyGet(options)(this.fetch, this.basePath);
    }

    /**
     * Get company by its id.
     * @summary Get company by id.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public companyIdGet(id: number, options?: any) {
        return DefaultApiFp(this.configuration).companyIdGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * Modify company with id.
     * @summary Modify existing company.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public companyIdPost(id: number, options?: any) {
        return DefaultApiFp(this.configuration).companyIdPost(id, options)(this.fetch, this.basePath);
    }

    /**
     * Description.
     * @summary Create new company.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public companyPut(options?: any) {
        return DefaultApiFp(this.configuration).companyPut(options)(this.fetch, this.basePath);
    }

    /**
     * This should be protected.
     * @summary Get projects by user ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public projectGet(options?: any) {
        return DefaultApiFp(this.configuration).projectGet(options)(this.fetch, this.basePath);
    }

    /**
     * This should be protected.
     * @summary Get project by project ID.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public projectIdGet(id: number, options?: any) {
        return DefaultApiFp(this.configuration).projectIdGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * Modify existing project on server.
     * @summary Modify existing project.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public projectIdPost(id: number, options?: any) {
        return DefaultApiFp(this.configuration).projectIdPost(id, options)(this.fetch, this.basePath);
    }

    /**
     * Identify user by auth credentials and create new project.
     * @summary Create new project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public projectPut(options?: any) {
        return DefaultApiFp(this.configuration).projectPut(options)(this.fetch, this.basePath);
    }

    /**
     * This should be protected.
     * @summary Get user by ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userGet(options?: any) {
        return DefaultApiFp(this.configuration).userGet(options)(this.fetch, this.basePath);
    }

    /**
     * Modify existing user by user id.
     * @summary Modify existing user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userPost(options?: any) {
        return DefaultApiFp(this.configuration).userPost(options)(this.fetch, this.basePath);
    }

    /**
     * Put new user to server. Return created user ID.
     * @summary Put new user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userPut(options?: any) {
        return DefaultApiFp(this.configuration).userPut(options)(this.fetch, this.basePath);
    }

}

